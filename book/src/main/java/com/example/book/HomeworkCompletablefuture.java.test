package com.example.book;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.function.Consumer;
import java.util.function.Function;

// copilot: disable
public class HomeworkCompletablefuture {

    // T√≥m t·∫Øt c√°ch d√πng CompletableFuture
    // Method	M√¥ t·∫£
    // runAsync()	Ch·∫°y t√°c v·ª• b·∫•t ƒë·ªìng b·ªô (kh√¥ng c√≥ k·∫øt qu·∫£ tr·∫£ v·ªÅ)
    // supplyAsync()	Ch·∫°y t√°c v·ª• b·∫•t ƒë·ªìng b·ªô (c√≥ k·∫øt qu·∫£ tr·∫£ v·ªÅ)
    // thenApply()	Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ sau khi ho√†n th√†nh
    // thenAccept()	Th·ª±c hi·ªán h√†nh ƒë·ªông v·ªõi k·∫øt qu·∫£, kh√¥ng tr·∫£ v·ªÅ gi√° tr·ªã
    // thenRun()	Ch·∫°y m·ªôt h√†nh ƒë·ªông khi ho√†n th√†nh, kh√¥ng c·∫ßn k·∫øt qu·∫£
    // thenCombine()	K·∫øt h·ª£p hai CompletableFuture c√≥ k·∫øt qu·∫£
    // thenCompose()	Chu·ªói hai CompletableFuture li√™n ti·∫øp
    // allOf()	Ch·∫°y nhi·ªÅu CompletableFuture song song
    // exceptionally()	X·ª≠ l√Ω l·ªói v√† tr·∫£ v·ªÅ gi√° tr·ªã thay th·∫ø
    // handle()	X·ª≠ l√Ω c·∫£ l·ªói v√† k·∫øt qu·∫£ th√†nh c√¥ng
    // join()	ƒê·ª£i CompletableFuture ho√†n th√†nh (kh√¥ng c·∫ßn try-catch)
    // get()	ƒê·ª£i v√† l·∫•y k·∫øt qu·∫£ c·ªßa CompletableFuture

    // 1. Create a new method in BookService that returns a CompletableFuture<List<BookDTO>>.
    // 2. The method should return all books asynchronously.
    // 3. Use the method findAll() to get all books.
    // 4. Use the method toList() to convert the Stream to a List.
    // 5. Use the method supplyAsync() to return the List.
    // 6. Use the method completedFuture() to return the List.
    // 7. Use the method exceptionally() to handle exceptions.
    // 8. Use the method whenComplete() to log the result.
    // 9. Use the method thenApply() to convert the List<BookEntity> to List<BookDTO>.
    // 10. Use the method thenApplyAsync() to convert the List<BookEntity> to List<BookDTO>.
    // 11. Use the method thenCompose() to convert the List<BookEntity> to List<BookDTO>.
    // 12. Use the method thenComposeAsync() to convert the List<BookEntity> to List<BookDTO>.
    // 13. Use the method thenCombine() to combine two CompletableFutures.
    // 14. Use the method thenCombineAsync() to combine two CompletableFutures.
    // 15. Use the method thenAcceptBoth() to accept the results of two CompletableFutures.
    // 16. Use the method thenAcceptBothAsync() to accept the results of two CompletableFutures.
    // 17. Use the method runAfterBoth() to run after both CompletableFutures are completed.
    // 18. Use the method runAfterBothAsync() to run after both CompletableFutures are completed.
    // 19. Use the method applyToEither() to apply the result of the first CompletableFuture that completes.
    // 20. Use the method applyToEitherAsync() to apply the result of the first CompletableFuture that completes.
    // 21. Use the method acceptEither() to accept the result of the first CompletableFuture that completes.
    // 22. Use the method acceptEitherAsync() to accept the result of the first CompletableFuture that completes.
    // 23. Use the method runAfterEither() to run after the first CompletableFuture that completes.
    // 24. Use the method runAfterEitherAsync() to run after the first CompletableFuture that completes.
    // 25. Use the
    //     method allOf() to wait for all CompletableFutures to complete.
    // 26. Use the method anyOf() to wait for any CompletableFuture to complete.
    // 27. Use the method delay() to delay the completion of a CompletableFuture.
    // 28. Use the method delayAsync() to delay the completion of a CompletableFuture.
    // 29. Use the method handle() to handle the result of a CompletableFuture.
    // 30. Use the method handleAsync() to handle the result of a CompletableFuture.
    // 31. Use the method thenAccept() to accept the result of a CompletableFuture.
    // 32. Use the method thenAcceptAsync() to accept the result of a CompletableFuture.
    // 33. Use the method thenRun() to run after a CompletableFuture is completed.
    // 34. Use the method thenRunAsync() to run after a CompletableFuture is completed.
    // 35. Use the method exceptionally() to handle exceptions.
    // 36. Use the method exceptionallyAsync() to handle exceptions.
    // 37. Use the method exceptionallyCompose() to handle exceptions.
    // 38. Use the method exceptionallyComposeAsync() to handle exceptions.
    // 39. Use the method whenComplete() to log the result.
    // 40. Use the method whenCompleteAsync() to log the result.
    // 41. Use the method thenApply() to convert the result of a CompletableFuture.
    // 42. Use the method thenApplyAsync() to convert the result of a CompletableFuture.
    // 43. Use the method thenCompose() to convert the result of a CompletableFuture.
    // 44. Use the method thenComposeAsync() to convert the result of a CompletableFuture.

    public static void main(String[] args) {
        System.out.println("Hello, world!");

        List<Customer> customers = Arrays.asList(
            new Customer(1, "Nguy·ªÖn VƒÉn A"),
            new Customer(2, "Tr·∫ßn Th·ªã B"),
            new Customer(3, "L√™ VƒÉn C")
        );
        Map<Integer, List<Order>> ordersMap = Map.of(
            1,
            Arrays.asList(new Order(101, 100.0), new Order(102, 200.0)),
            2,
            Arrays.asList(new Order(103, 300.0), new Order(104, 400.0)),
            3,
            Arrays.asList(new Order(105, 500.0))
        );

        System.out.println(
            "\n\n" +
            customers.toString() +
            "\n\n" +
            ordersMap.toString() +
            "\n\n-------------------\n\n"
        );
        // * B√†i to√°n: X·ª≠ l√Ω d·ªØ li·ªáu kh√°ch h√†ng v√† ƒë∆°n h√†ng trong h·ªá th·ªëng E-Commerce
        // C√¥ng ty b·∫°n c√≥ m·ªôt h·ªá th·ªëng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ c·∫ßn x·ª≠ l√Ω c√°c t√°c v·ª• sau:

        // L·∫•y th√¥ng tin kh√°ch h√†ng theo ID.
        // L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng.
        // T√≠nh t·ªïng s·ªë ti·ªÅn c·ªßa t·∫•t c·∫£ c√°c ƒë∆°n h√†ng.
        // G·ª≠i email th√¥ng b√°o n·∫øu t·ªïng s·ªë ti·ªÅn v∆∞·ª£t qu√° m·ªôt m·ª©c n√†o ƒë√≥.
        // Ghi log k·∫øt qu·∫£ x·ª≠ l√Ω.
        // B·∫°n c·∫ßn th·ª±c hi·ªán c√°c t√°c v·ª• n√†y m·ªôt c√°ch b·∫•t ƒë·ªìng b·ªô v√† t·ªëi ∆∞u hi·ªáu su·∫•t.

        // 10 c√¢u h·ªèi th·ª±c h√†nh
        // 1Ô∏è‚É£ C√¢u 1
        // üîπ Y√™u c·∫ßu: Vi·∫øt m·ªôt ch∆∞∆°ng tr√¨nh ƒë·ªÉ l·∫•y th√¥ng tin kh√°ch h√†ng d·ª±a tr√™n ID c·ªßa h·ªç t·ª´ c∆° s·ªü d·ªØ li·ªáu. Vi·ªác l·∫•y d·ªØ li·ªáu n√†y c√≥ th·ªÉ m·∫•t th·ªùi gian, v√¨ v·∫≠y ch∆∞∆°ng tr√¨nh c·∫ßn th·ª±c hi·ªán t√°c v·ª• n√†y m·ªôt c√°ch kh√¥ng ch·∫∑n (non-blocking).
        // üí° G·ª£i √Ω: L√†m th·∫ø n√†o ƒë·ªÉ y√™u c·∫ßu l·∫•y th√¥ng tin kh√°ch h√†ng m√† kh√¥ng l√†m ch∆∞∆°ng tr√¨nh b·ªã d·ª´ng?
        System.out.println("\n\n---------Cau 1:----------\n\n");
        Function<Integer, Customer> findCustomer = id ->
            customers
                .stream()
                .filter(c -> c.getId() == id)
                .findFirst()
                .orElse(null);
        CompletableFuture<Customer> infoCus = CompletableFuture.supplyAsync(
            () -> findCustomer.apply(1)
        );

        System.out.println(infoCus.join());
        // System.out.println();
        // CompletableFuture.supplyAsync(() ->
        //     customers
        //         .stream()
        //         .filter(c -> c.getId() == 1)
        //         .findFirst()
        //         .orElse(null)
        // ).thenAccept(System.out::println);
        // 2Ô∏è‚É£ C√¢u 2
        // üîπ Y√™u c·∫ßu: Sau khi l·∫•y ƒë∆∞·ª£c th√¥ng tin kh√°ch h√†ng, ch∆∞∆°ng tr√¨nh c·∫ßn t·ª± ƒë·ªông ghi l·∫°i l·ªãch s·ª≠ truy v·∫•n v√†o h·ªá th·ªëng log, nh∆∞ng kh√¥ng c·∫ßn ƒë·ª£i vi·ªác ghi log ho√†n th√†nh m·ªõi ti·∫øp t·ª•c x·ª≠ l√Ω c√°c t√°c v·ª• kh√°c.

        // üí° G·ª£i √Ω: L√†m sao ƒë·ªÉ ghi log m√† kh√¥ng l√†m ch·∫≠m ch∆∞∆°ng tr√¨nh ch√≠nh?
        System.out.println("\n\n---------Cau 1:----------\n\n");
        Consumer<Customer> wireLog = cus -> {
            try {
                System.out.println("wire file log: ", cus.toString());
            } catch (Exception e) {
                // TODO: handle exception
            }
        };
        CompletableFuture<Void> que2 = CompletableFuture.runAsync(() ->
            findCustomer.apply(1)
        ).runAsync(wireLog);
        // 3Ô∏è‚É£ C√¢u 3
        // üîπ Y√™u c·∫ßu: Khi c√≥ th√¥ng tin kh√°ch h√†ng, ch∆∞∆°ng tr√¨nh c·∫ßn ti·∫øp t·ª•c l·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa h·ªç t·ª´ c∆° s·ªü d·ªØ li·ªáu. ƒêi·ªÅu n√†y c·∫ßn th·ª±c hi·ªán m·ªôt c√°ch tu·∫ßn t·ª± nh∆∞ng v·∫´n kh√¥ng l√†m ch·∫≠m ch∆∞∆°ng tr√¨nh ch√≠nh.

        // üí° G·ª£i √Ω: L√†m sao ƒë·ªÉ th·ª±c hi·ªán m·ªôt t√°c v·ª• ti·∫øp theo ngay khi t√°c v·ª• tr∆∞·ªõc ƒë√≥ ho√†n t·∫•t?

        // 4Ô∏è‚É£ C√¢u 4
        // üîπ Y√™u c·∫ßu: Sau khi c√≥ danh s√°ch ƒë∆°n h√†ng, hi·ªÉn th·ªã t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng l√™n m√†n h√¨nh. V√¨ ƒë√¢y l√† m·ªôt t√°c v·ª• ch·ªâ hi·ªÉn th·ªã d·ªØ li·ªáu m√† kh√¥ng c·∫ßn x·ª≠ l√Ω th√™m, ch∆∞∆°ng tr√¨nh kh√¥ng c·∫ßn ch·∫∑n c√°c t√°c v·ª• kh√°c ƒë·ªÉ th·ª±c hi·ªán ƒëi·ªÅu n√†y.

        // üí° G·ª£i √Ω: L√†m sao ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch ƒë∆°n h√†ng ngay khi c√≥ d·ªØ li·ªáu m√† kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn c√°c t√°c v·ª• kh√°c?

        // 5Ô∏è‚É£ C√¢u 5
        // üîπ Y√™u c·∫ßu: Khi ƒë√£ l·∫•y ƒë∆∞·ª£c danh s√°ch ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng, h√£y t√≠nh t·ªïng s·ªë ti·ªÅn c·ªßa t·∫•t c·∫£ ƒë∆°n h√†ng. Trong khi ƒë√≥, ch∆∞∆°ng tr√¨nh c·∫ßn l·∫•y t·ª∑ gi√° USD/VND t·ª´ m·ªôt API b√™n ngo√†i v√† s·ª≠ d·ª•ng t·ª∑ gi√° n√†y ƒë·ªÉ quy ƒë·ªïi t·ªïng ti·ªÅn sang VND. C·∫£ hai c√¥ng vi·ªác n√†y c√≥ th·ªÉ th·ª±c hi·ªán song song ƒë·ªÉ ti·∫øt ki·ªám th·ªùi gian.

        // üí° G·ª£i √Ω: L√†m th·∫ø n√†o ƒë·ªÉ th·ª±c hi·ªán hai t√°c v·ª• ri√™ng bi·ªát c√πng l√∫c v√† k·∫øt h·ª£p k·∫øt qu·∫£ c·ªßa ch√∫ng?

        // 6Ô∏è‚É£ C√¢u 6
        // üîπ Y√™u c·∫ßu: Sau khi l·∫•y ƒë∆∞·ª£c th√¥ng tin kh√°ch h√†ng, c·∫ßn g·ªçi m·ªôt API b√™n ngo√†i ƒë·ªÉ l·∫•y ƒë√°nh gi√° (review) c·ªßa kh√°ch h√†ng ƒë√≥. Vi·ªác n√†y c√≥ th·ªÉ m·∫•t th·ªùi gian, nh∆∞ng c·∫ßn th·ª±c hi·ªán ngay sau khi c√≥ th√¥ng tin kh√°ch h√†ng.

        // üí° G·ª£i √Ω: L√†m sao ƒë·ªÉ x·ª≠ l√Ω m·ªôt t√°c v·ª• ti·∫øp theo ngay khi c√≥ k·∫øt qu·∫£ t·ª´ m·ªôt t√°c v·ª• tr∆∞·ªõc ƒë√≥?

        // 7Ô∏è‚É£ C√¢u 7
        // üîπ Y√™u c·∫ßu: Ch∆∞∆°ng tr√¨nh c·∫ßn th·ª±c hi·ªán nhi·ªÅu t√°c v·ª• b·∫•t ƒë·ªìng b·ªô c√πng l√∫c, bao g·ªìm l·∫•y danh s√°ch ƒë∆°n h√†ng, l·∫•y t·ª∑ gi√°, v√† l·∫•y ƒë√°nh gi√° kh√°ch h√†ng. Ch·ªâ khi t·∫•t c·∫£ c√°c t√°c v·ª• n√†y ho√†n th√†nh, ch∆∞∆°ng tr√¨nh m·ªõi ti·∫øp t·ª•c x·ª≠ l√Ω b∆∞·ªõc ti·∫øp theo.

        // üí° G·ª£i √Ω: L√†m sao ƒë·ªÉ ch·ªù cho ƒë·∫øn khi t·∫•t c·∫£ t√°c v·ª• ho√†n th√†nh m√† kh√¥ng c·∫ßn ch·ªù t·ª´ng t√°c v·ª• m·ªôt theo c√°ch tu·∫ßn t·ª±?

        // 8Ô∏è‚É£ C√¢u 8
        // üîπ Y√™u c·∫ßu: Trong qu√° tr√¨nh l·∫•y th√¥ng tin kh√°ch h√†ng, c√≥ th·ªÉ x·∫£y ra l·ªói (v√≠ d·ª•: kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i, l·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu). Ch∆∞∆°ng tr√¨nh c·∫ßn c√≥ c√°ch x·ª≠ l√Ω l·ªói v√† thay th·∫ø b·∫±ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh l√†m gi√°n ƒëo·∫°n c√°c b∆∞·ªõc ti·∫øp theo.

        // üí° G·ª£i √Ω: L√†m sao ƒë·ªÉ x·ª≠ l√Ω l·ªói khi l·∫•y d·ªØ li·ªáu m√† v·∫´n ƒë·∫£m b·∫£o ch∆∞∆°ng tr√¨nh kh√¥ng b·ªã gi√°n ƒëo·∫°n?

        // 9Ô∏è‚É£ C√¢u 9
        // üîπ Y√™u c·∫ßu: Khi l·∫•y danh s√°ch ƒë∆°n h√†ng, n·∫øu g·∫∑p l·ªói th√¨ c·∫ßn x·ª≠ l√Ω linh ho·∫°t: n·∫øu l·ªói nh·∫π (v√≠ d·ª•: timeout t·∫°m th·ªùi), th·ª≠ l·∫•y l·∫°i d·ªØ li·ªáu; n·∫øu l·ªói nghi√™m tr·ªçng (v√≠ d·ª•: kh√¥ng c√≥ k·∫øt n·ªëi), tr·∫£ v·ªÅ danh s√°ch r·ªóng thay v√¨ l√†m s·∫≠p ch∆∞∆°ng tr√¨nh.

        // üí° G·ª£i √Ω: L√†m sao ƒë·ªÉ x·ª≠ l√Ω l·ªói m·ªôt c√°ch m·ªÅm d·∫ªo, kh√¥ng l√†m gi√°n ƒëo·∫°n to√†n b·ªô h·ªá th·ªëng?

        // üîü C√¢u 10
        // üîπ Y√™u c·∫ßu: Khi ƒë√£ t√≠nh to√°n xong t·ªïng ti·ªÅn ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng, hi·ªÉn th·ªã t·ªïng s·ªë ti·ªÅn ƒë√≥ ra m√†n h√¨nh. V√¨ ƒë√¢y l√† b∆∞·ªõc cu·ªëi c√πng, ch∆∞∆°ng tr√¨nh c·∫ßn ƒë·ª£i cho ƒë·∫øn khi t√≠nh to√°n xong m·ªõi hi·ªÉn th·ªã k·∫øt qu·∫£.

        // üí° G·ª£i √Ω: L√†m sao ƒë·ªÉ l·∫•y k·∫øt qu·∫£ cu·ªëi c√πng t·ª´ m·ªôt t√°c v·ª• b·∫•t ƒë·ªìng b·ªô?

        // private static final Logger logger = LoggerFactory.getLogger(
        //     HomeworkCompletablefuture.class
        // );
    }
}

class Customer {

    private int id;
    private String name;

    public Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return (
            "{" + " id='" + getId() + "'" + ", name='" + getName() + "'" + "}"
        );
    }
}

class Order {

    private int orderId;
    private double price;

    public Order(int orderId, double price) {
        this.orderId = orderId;
        this.price = price;
    }

    public int getOrderId() {
        return orderId;
    }

    public double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return (
            "{" +
            " orderId='" +
            getOrderId() +
            "'" +
            ", price='" +
            getPrice() +
            "'" +
            "}"
        );
    }
}
